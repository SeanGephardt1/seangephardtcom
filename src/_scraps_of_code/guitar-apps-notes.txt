        for ( let c = 0; c < this.FretboardMatrix.length; c++ )
        {
            //console.debug( c, this.FretboardMatrix[c] );
            this.ChordMatrix[c] = [];

            for ( let d = 0; d < this.FretboardMatrix[c].length; d++ )
            {
                //  console.debug( d, this.FretboardMatrix[c][d], chordData.Notes );
                this.ChordMatrix[c][d] = this.FretboardMatrix[c][d];

                let _note_found = chordData.Notes.filter( function ( item )
                {
                    return item === this.FretboardMatrix[c][d];
                }, this );
                //  console.debug( "_note_found", _note_found );

                if ( _note_found.length === 0 )
                {
                    this.ChordMatrix[c][d] = null;
                }
            }
        }



                    //let _fret_index = 0;
            //_fret_index = _note_index;
            ////if ( chordData.Fret <= 0 )
            ////{
            //// _fret_index = _note_index;
            ////   }
            ////else
            ////{
            ////    _fret_index = _note_index + chordData.Fret;
            ////}



                                <line x1="18px" x2="280px" y1="90px" y2="90px" style={this.FretStyle} />
                    <line x1="18px" x2="280px" y1="140px" y2="140px" style={this.FretStyle} />
                    <line x1="18px" x2="280px" y1="190px" y2="190px" style={this.FretStyle} />
                    <line x1="18px" x2="280px" y1="240px" y2="240px" style={this.FretStyle} />
                    <line x1="18px" x2="280px" y1="290px" y2="290px" style={this.FretStyle} />

                    <line x1={this.StringSpaces[0]} x2={this.StringSpaces[0]} y1="40px" y2="290px" style={this.LowEStringStyle} />
                    <line x1={this.StringSpaces[1]} x2={this.StringSpaces[1]}  y1="40px" y2="290px" style={this.AStringStyle} />
                    <line x1={this.StringSpaces[2]} x2={this.StringSpaces[2]}  y1="40px" y2="290px" style={this.DStringStyle} />
                    <line x1={this.StringSpaces[3]} x2={this.StringSpaces[3]}  y1="40px" y2="290px" style={this.GStringStyle} />
                    <line x1={this.StringSpaces[4]} x2={this.StringSpaces[4]}  y1="40px" y2="290px" style={this.BStringStyle} />
                    <line x1={this.StringSpaces[5]} x2={this.StringSpaces[5]}  y1="40px" y2="290px" style={this.HighEStringStyle} />


                {/* SCALE NOTES */}
                <g>
                    <circle cx={this.StringSpaces[0]} cy="66" r="18" style={this.OpenNoteStyle}/>
                    <circle cx={this.StringSpaces[1]} cy="66" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[2]} cy="66" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[3]} cy="66" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[4]} cy="66" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[5]} cy="66" r="18" style={this.NoteStyle} />
                </g>

                {/* CHORD NOTES */}
                <g>
                    <circle cx={this.StringSpaces[0]} cy="216" r="18" style={this.OpenNoteStyle}/>
                    <circle cx={this.StringSpaces[1]} cy="216" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[2]} cy="216" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[3]} cy="216" r="18" style={this.NoteStyle} />
                    <circle cx={this.StringSpaces[4]} cy="216" r="18" style={this.OpenNoteStyle} />
                    <circle cx={this.StringSpaces[5]} cy="216" r="18" style={this.NoteStyle} />
                </g>

                         <circle key={idx2} cx={item2.cx} cy={item2.cy} r={item2.r} style={this.NoteStyle}/>


                            {
                                item.map( ( item2, idx2 ) =>
                                    <circle key={idx2} id={idx2} cx={item2.cx} cy={idx2 * 20} r="18" style={this.NoteStyle}/>
                                )
                            }


        for ( let a = 0; a < this.ChordMatrix.length; a++ )
        {
            //  console.debug( "this.ChordMatrix[a]", this.ChordMatrix[a] );
            this.ChordNotes[a] = [];
            //  console.debug(a,  "this.StringPositions[i]", this.StringPositions[a] );
            //  console.debug(a,  "this.FretsPostions[i]", this.FretsPostions[a] );

            for ( let b = 0; b < this.ChordMatrix[a].length; b++ )
            {
                //  console.debug( "this.ChordMatrix[i][a]", this.ChordMatrix[a][b] );
                //  console.debug( "a,b", a, b );

                this.ChordNotes[a][b] = this.ChordMatrix[a][b];

                if ( this.ChordMatrix[a][b] !== null )
                {
                    let _chord_note = {
                        cx: this.StringPositions[a].x1,
                        cy: _frets_y[b] + 25,// + (this.FretHeightSpace/2),
                        r: 18
                    };
                    //  console.debug("_chord_note", _chord_note);
                    this.ChordNotes[a][b] = _chord_note;
                }
            }
        }