//	https://www.tutorialspoint.com/webgl/webgl_interactive_cube.htm

import React from 'react';
import SubNav from '../../controls/nav/sub-nav.js';
import './webgl-demo.css';

export default class WebGLDemo extends React.Component
{
	static defaultProps = {
		Title: "WebGL demo",
		LinkTitle: "WebGL demo",
		Href: "/portfolio/webgl-demos/",
		// Icon: SVG.AppNavButtons.About
	};
	constructor( props )
	{
		super( props );
		this.Title = ( this.props.Title || this.defaultProps.Title );
		this.LinkTitle = ( this.props.LinkTitle || this.defaultProps.LinkTitle );
		this.Href = ( this.props.Href || this.defaultProps.Href );

		document.title = this.Title;

		this.Canvas = React.createRef();
		this.WebGLContext = undefined;
		this.AnimationID = undefined;

		this.Vertices = [
			-1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1, -1,
			-1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1, 1,
			-1, -1, -1, -1, 1, -1, -1, 1, 1, -1, -1, 1,
			1, -1, -1, 1, 1, -1, 1, 1, 1, 1, -1, 1,
			-1, -1, -1, -1, -1, 1, 1, -1, 1, 1, -1, -1,
			-1, 1, -1, -1, 1, 1, 1, 1, 1, 1, 1, -1
        ];

        this.Colors = [
			5, 3, 7, 5, 3, 7, 5, 3, 7, 5, 3, 7,
			1, 1, 3, 1, 1, 3, 1, 1, 3, 1, 1, 3,
			0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1,
			1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0,
			1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 0,
			0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 1, 0,
        ];

        this.Indices = [
			0, 1, 2, 0, 2, 3, 4, 5, 6, 4, 6, 7,
			8, 9, 10, 8, 10, 11, 12, 13, 14, 12, 14, 15,
			16, 17, 18, 16, 18, 19, 20, 21, 22, 20, 22, 23 
        ];

		this.VertexBuffer = undefined;
		this.ColorBuffer = undefined;
		this.IndexBuffer = undefined;
		this.ShaderProgram = undefined;
		this._Pmatrix = undefined;	//	this.WebGLContext.getUniformLocation( this.ShaderProgram, "Pmatrix" );
		this._Vmatrix = undefined;	//	this.WebGLContext.getUniformLocation( this.ShaderProgram, "Vmatrix" );
		this._Mmatrix = undefined; //	this.WebGLContext.getUniformLocation( this.ShaderProgram, "Mmatrix" );

		this.Project_Matrix = undefined;	//	this.Get_Projection( 40, this.state.CanvasSize / 2, 1, 100 );
		this.Motion_Matrix = undefined;	//	[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
		this.View_Matrix = undefined;		//	[1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];

		this.VertCode = 'attribute vec3 position; '+
            'uniform mat4 Pmatrix; '+
            'uniform mat4 Vmatrix; '+
            'uniform mat4 Mmatrix; '+
            'attribute vec3 color; '+//the color of the point
            'varying vec3 vColor; '+
            'void main(void) { '+//pre-built function
               'gl_Position = Pmatrix*Vmatrix*Mmatrix*vec4(position, 1.);'+
               'vColor = color;'+
            '}';

		this.FragCode = 'precision mediump float;' +
			'varying vec3 vColor;' +
			'void main(void) { gl_FragColor = vec4(vColor, 1.);}';

		this.CanvasSize = 1000;
		this.AMORTIZATION = 0.95;
        this.Drag = false;
		this.Old_x = undefined;
		this.Old_y = undefined;
		this.dX = 0;
		this.dY = 0;
		this.THETA = 0;
		this.PHI = 0;
		this.Time_Old = 0;

		return;
	};
	componentDidMount() 
	{
		console.clear();

		//	console.debug( "WebGLDemo.componentDidMount()", this.canvas.current );
		this.WebGLContext = this.Canvas.current.getContext( "experimental-webgl" );
		this.Init_WebGL_Buffers();
		this.Init_WebGL_Shaders();
		this.Init_WebGL_AttributesToVertexShader();
		this.Init_WebGL_Matrix();
		//	this.Init_WebGL_EventHandlers();

		this.Animate_Cube( 0 );
		//	this.AnimationID = window.requestAnimationFrame( this.Animate_Cube );
		return;
	};
	componentWillUnmount()
	{	//console.debug( "AppLoader.componentWillUnmount()", this.AnimationID );
		window.cancelAnimationFrame( this.Animate_Cube );
		this.AnimationID = undefined;
		return;
	};

	// INIT FUNCTIONS
	Init_WebGL_Buffers()
	{	console.debug( "WebGLDemo.Init_WebGL_Buffers()" );
		//	Create and store data into vertex buffer
		this.VertexBuffer = this.WebGLContext.createBuffer();
		this.WebGLContext.bindBuffer( this.WebGLContext.ARRAY_BUFFER, this.VertexBuffer );
		this.WebGLContext.bufferData( this.WebGLContext.ARRAY_BUFFER, new Float32Array( this.Vertices ), this.WebGLContext.STATIC_DRAW );

         // Create and store data into color buffer
        this.ColorBuffer = this.WebGLContext.createBuffer();
        this.WebGLContext.bindBuffer(this.WebGLContext.ARRAY_BUFFER, this.ColorBuffer);
        this.WebGLContext.bufferData(this.WebGLContext.ARRAY_BUFFER, new Float32Array(this.Colors), this.WebGLContext.STATIC_DRAW);

         // Create and store data into index buffer
		this.IndexBuffer = this.WebGLContext.createBuffer();
		this.WebGLContext.bindBuffer( this.WebGLContext.ELEMENT_ARRAY_BUFFER, this.IndexBuffer );
		this.WebGLContext.bufferData( this.WebGLContext.ELEMENT_ARRAY_BUFFER, new Uint16Array( this.Indices ), this.WebGLContext.STATIC_DRAW );
		return;
	};
	Init_WebGL_Shaders()
	{	console.debug( "WebGLDemo.Init_WebGL_Shaders()");
		let vertShader = this.WebGLContext.createShader( this.WebGLContext.VERTEX_SHADER );
		this.WebGLContext.shaderSource( vertShader, this.VertCode );
		this.WebGLContext.compileShader( vertShader );

		let fragShader = this.WebGLContext.createShader( this.WebGLContext.FRAGMENT_SHADER );
		this.WebGLContext.shaderSource( fragShader, this.FragCode );
		this.WebGLContext.compileShader( fragShader );

		this.ShaderProgram = this.WebGLContext.createProgram();
		this.WebGLContext.attachShader( this.ShaderProgram, vertShader );
		this.WebGLContext.attachShader( this.ShaderProgram, fragShader );
		this.WebGLContext.linkProgram( this.ShaderProgram );

		return;
	};
	Init_WebGL_AttributesToVertexShader()
	{
		console.debug( "Init_WebGL_AttributesToVertexShader()::Associating attributes to vertex shader", this.ShaderProgram);

		this._Pmatrix = this.WebGLContext.getUniformLocation( this.ShaderProgram, "Pmatrix" );
		this._Vmatrix = this.WebGLContext.getUniformLocation( this.ShaderProgram, "Vmatrix" );
		this._Mmatrix = this.WebGLContext.getUniformLocation( this.ShaderProgram, "Mmatrix" );

		this.WebGLContext.bindBuffer( this.WebGLContext.ARRAY_BUFFER, this.VertexBuffer );
		let _position = this.WebGLContext.getAttribLocation( this.ShaderProgram, "position" );
		this.WebGLContext.vertexAttribPointer( _position, 3, this.WebGLContext.FLOAT, false, 0, 0 );
		this.WebGLContext.enableVertexAttribArray( _position );

		this.WebGLContext.bindBuffer( this.WebGLContext.ARRAY_BUFFER, this.ColorBuffer );
		let _color = this.WebGLContext.getAttribLocation( this.ShaderProgram, "color" );
		this.WebGLContext.vertexAttribPointer( _color, 3, this.WebGLContext.FLOAT, false, 0, 0 );
		this.WebGLContext.enableVertexAttribArray( _color );

		this.WebGLContext.useProgram( this.ShaderProgram );
		return;
	}
	Init_WebGL_Matrix()
	{
		console.debug( "Init_WebGL_Matrix()");

		this.Project_Matrix = this.Get_Projection( 40, this.CanvasSize / 2, 1, 100 );
		this.Motion_Matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
		this.View_Matrix = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
		this.View_Matrix[14] = this.View_Matrix[14] - 6;
		return;
	}
	Init_WebGL_EventHandlers()
	{
		console.debug( "Init_WebGL_EventHandlers", this.Canvas );
		//canvas.addEventListener("mousedown", mouseDown, false);
  //      canvas.addEventListener("mouseup", mouseUp, false);
  //      canvas.addEventListener("mouseout", mouseUp, false);
  //      canvas.addEventListener("mousemove", mouseMove, false);

		//this.Canvas.current.addEventListener( "mousedown", this.OnMouseDown_SelectCube, false );
		//this.Canvas.current.addEventListener( "mouseup", this.OnMouseUp_ReleaseCube, false );
		//this.Canvas.current.addEventListener( "mouseout", this.OnMouseUp_ReleaseCube, false );
		////	this.Canvas.current.addEventListener( "mousemove", this.OnMouseDown_DragCube, false );
		return;
	}

	// UTILITY METHODS
	Get_Projection( angle, a, zMin, zMax ) 
	{
		let ang = Math.tan( ( angle * .5 ) * Math.PI / 180 );
		//	angle*.5
		return [
			0.5 / ang, 0, 0, 0,
			0, 0.5 * a / ang, 0, 0,
			0, 0, -( zMax + zMin ) / ( zMax - zMin ), -1,
			0, 0, ( -2 * zMax * zMin ) / ( zMax - zMin ), 0 
		];
	};
	RotateX( m, angle ) 
	{
		let c = Math.cos( angle );
		let s = Math.sin( angle );
		let mv1 = m[1];
		let mv5 = m[5];
		let mv9 = m[9];

		m[1] = m[1] * c - m[2] * s;
		m[5] = m[5] * c - m[6] * s;
		m[9] = m[9] * c - m[10] * s;

		m[2] = m[2] * c + mv1 * s;
		m[6] = m[6] * c + mv5 * s;
		m[10] = m[10] * c + mv9 * s;
		return;
	};
	RotateY( m, angle ) 
	{
		let c = Math.cos(angle);
        let s = Math.sin(angle);
		let mv0 = m[0];
		let mv4 = m[4];
		let mv8 = m[8];

		m[0] = c * m[0] + s * m[2];
		m[4] = c * m[4] + s * m[6];
		m[8] = c * m[8] + s * m[10];

		m[2] = c * m[2] - s * mv0;
		m[6] = c * m[6] - s * mv4;
		m[10] = c * m[10] - s * mv8;
		return;
	};

	Animate_Cube( time )
	{
		console.debug( "Animate_Cube", time, this.Time_Old );
		//	let dt = time - this.Time_Old;

		if ( this.Drag === false) 
		{
			this.dX *= this.AMORTIZATION;
			this.dY *= this.AMORTIZATION;
			this.THETA += this.dX;
			this.PHI += this.dY;
		}

        //	SET MODEL MATRIX TO I4
		this.Motion_Matrix[0] = 1;
		this.Motion_Matrix[1] = 0;
		this.Motion_Matrix[2] = 0;
		this.Motion_Matrix[3] = 0;

		this.Motion_Matrix[4] = 0;
		this.Motion_Matrix[5] = 1;
		this.Motion_Matrix[6] = 0;
		this.Motion_Matrix[7] = 0;

		this.Motion_Matrix[8] = 0;
		this.Motion_Matrix[9] = 0;
		this.Motion_Matrix[10] = 1;
		this.Motion_Matrix[11] = 0;

		this.Motion_Matrix[12] = 0;
		this.Motion_Matrix[13] = 0;
		this.Motion_Matrix[14] = 0;
        this.Motion_Matrix[15] = 1;

		this.RotateY( this.Motion_Matrix, this.THETA );
		this.RotateX( this.Motion_Matrix, this.PHI );

		this.Time_Old = time; 

		//	this.WebGLContext.depthFunc(this.WebGLContext.LEQUAL);

		this.WebGLContext.clearColor( 0.5, 0.5, 0.5, 0.9 );
		this.WebGLContext.enable( this.WebGLContext.DEPTH_TEST );
		//	this.WebGLContext.clearDepth( 1.0 );

		//	this.WebGLContext.clear( this.WebGLContext.COLOR_BUFFER_BIT | this.WebGLContext.DEPTH_BUFFER_BIT );
		this.WebGLContext.clear( this.WebGLContext.COLOR_BUFFER_BIT );

		this.WebGLContext.uniformMatrix4fv( this._Pmatrix, false, this.Project_Matrix );
		this.WebGLContext.uniformMatrix4fv( this._Vmatrix, false, this.View_Matrix );
		this.WebGLContext.uniformMatrix4fv( this._Mmatrix, false, this.Motion_Matrix );

		this.WebGLContext.bindBuffer( this.WebGLContext.ELEMENT_ARRAY_BUFFER, this.IndexBuffer );

		this.WebGLContext.viewport( 0.0, 0.0, this.CanvasSize, this.CanvasSize );
		this.WebGLContext.drawElements( this.WebGLContext.TRIANGLES, this.Indices.length, this.WebGLContext.UNSIGNED_SHORT, 0 );

		//	this.AnimationID = window.requestAnimationFrame( this.Animate_Cube( dt, this) );
		return;
	};

	// EVENT SETUP METHODS
	OnMouseDown_SelectCube( ev )
	{
		console.debug( "OnMouseDown_SelectCube1", this.Drag );
		this.Drag = true;
		this.Old_x = ev.pageX;
		this.Old_y = ev.pageY;
		//this.AnimationID = window.requestAnimationFrame( this.Animate_Cube( 0 ) );
        ev.preventDefault();
		return false;
	};
	OnMouseUp_ReleaseCube( ev )
	{	//	console.debug( "OnMouseUp_ReleaseCube1", this.Drag );
		this.Drag = false;
		//	console.debug( "OnMouseUp_ReleaseCube2", this.Drag );
		return;
	};
	OnMouseMove_DragCube( ev )
	{
		//	console.debug( "OnMouseMove_DragCube", this.Drag );
		if ( this.Drag === false )
		{
			return false;
		}
		else if ( this.Drag === true )
		{
			console.debug( "OnMouseMove_DragCube", this.Drag );

			this.dX = ( ev.pageX - this.Old_x ) * 2 * ( Math.PI / ( this.CanvasSize / 2 ) );
			this.dY = ( ev.pageY - this.Old_y ) * 2 * ( Math.PI / ( this.CanvasSize / 2 ) );
			this.THETA += this.dX;
			this.PHI += this.dY;
			this.Old_x = ev.pageX;
			this.Old_y = ev.pageY;
		}
		ev.preventDefault();
		return;
	};

    render()
	{
		return (
			<div className="page-layout">
				<SubNav />

				<div className="canvas-demo-header">{this.Title}</div>

				<div className="canvas-panel">
					<canvas id="html-5-canvas"
						className="canvas-2d"
						ref={this.Canvas}
						height={this.CanvasSize}
						width={this.CanvasSize}
						onMouseDown={this.OnMouseDown_SelectCube.bind( this )}
						onMouseUp={this.OnMouseUp_ReleaseCube.bind( this )}
						onMouseOut={this.OnMouseUp_ReleaseCube.bind( this )}
						onMouseMove={this.OnMouseMove_DragCube.bind( this )}>
					</canvas>
				</div>					
			</div>
        );
    }
};