        if ( this.Data.Orientation === SvgChord.Orientations.Right )
        {
            this.StringNamesRect = {
                x: 50,
                y: this.LabelRectCoords.height,
                height: this.LabelRectCoords.height,
                width: this.Width - 50
            };

            this.FretNamesRect = {
                x: 0,
                y: this.LabelRectCoords.height + this.StringNamesRect.height,
                height: this.Height - this.LabelRectCoords.height + this.StringNamesRect.height,
                width: 50
            };

            this.FretboardRect = {
                x: this.FretNamesRect.width,
                y: this.LabelRectCoords.height + this.StringNamesRect.height + (this._default_padding /2),
                height: this.Height - this.LabelRectCoords.height + this.StringNamesRect.height - ( this._default_padding * 2 ),
                width: this.Width - this.FretNamesRect.width - ( this._default_padding / 2 )
            };
        }
        else if ( this.Data.Orientation === SvgChord.Orientations.Left )
        {
            this.StringNamesRect = {
                x: 0,
                y: this.LabelRectCoords.height,
                height: this.LabelRectCoords.height,
                width: this.Width - 50
            };

            this.FretNamesRect = {
                x: this.Width - 50,
                y: this.LabelRectCoords.height + this.StringNamesRect.height,
                height: this.Height - this.LabelRectCoords.height + this.StringNamesRect.height,
                width: 50
            };

            this.FretboardRect = {
                x: 0,
                y: this.LabelRectCoords.height + this.StringNamesRect.height,
                height: this.Height - this.LabelRectCoords.height + this.StringNamesRect.height,
                width: this.Width - this.FretNamesRect.width
            };
        }


    ComputeChordFretboardLayouts()
    {
        console.debug( "ComputeChordFretboardLayouts()");
        //  console.debug( "this.StringNamesRect", this.StringNamesRect );
        //  console.debug( "this.FretboardRect", this.FretboardRect );
        //  console.debug( "this.FretNamesRect", this.FretNamesRect );

        // SET STRING NAME TEXT AREA
        let _string_names_padding = 10;
        let _string_names_left = 0;

        if ( this.Data.Orientation === "right" )
        {
            _string_names_left = this.StringNamesRect.x + _string_names_padding;
        }
        else if (this.Data.Orientation === "left")
        {
            _string_names_left = this.Width - (_string_names_padding * 4);
        }
        //  console.debug( "_string_names_left", _string_names_left );

        this.StringNameTextData = {
            x: _string_names_left,
            y: this.StringNamesRect.y,
            rotate: 0,
            textLength: "50%",
            fontSize: 26,
            fillColor: "rgba(0,0,0,1)",
            dominantBaseline: "text-top",
            textAnchor: "start",
            text: this.Data.Name
        };
        //  console.debug( "this.StringNameTextData", this.StringNameTextData );

        //  SET STRING NAME OBJECTS - AFTER STRINGS HAVE BEEN DEFINED
        //  REVERSE STRING NOTES ARRAY AS WELL
        //  console.debug( "this.Data.Tuning", this.Data.Tuning );
        this.StringNames = [];
        let _string_names = [];

        for ( let i = 0; i < this.Data.Tuning.length; i++ )
        {
            _string_names.push( this.Data.Tuning[i] );
        }

        if ( this.Data.Orientation === "right" )
        {
            _string_names.reverse();
        }
        //  console.debug( "_string_names", _string_names );

        let _string_space = Math.round( (this.FretboardRect.height - this._string_spacing) / this.Data.Tuning.length ) ;
        //  console.debug( "_string_space", _string_space );

        for ( let i = 0; i < _string_names.length; i++ )
        {   //  console.debug( "_string_names[i]", _string_names[i] );

            let _ss = ( _string_space * (i+1)) + this.StringNameTextData.y; // + this._string_spacing );
            //  console.debug( "_ss", _ss );

            let _new_string_name = {
                text: _string_names[i],
                x: _string_names_left,
                y:_ss
            };
            this.StringNames.push( _new_string_name );
        }
        //  console.debug( "this.StringNames", this.StringNames );


        //  COMPUTE FULL STRINGS
        //  console.debug( "this._fretboard_count", this._fretboard_count, this.StringNames.length );
        //  <line x1="80" y1="100" x2="1450" y2="100" stroke="black" strokeWidth="10" />
        //  this.StringNotes = [];
        this.StringLinePositions = [];

        let _string_left = 0;
        let _string_right = 0;

        if ( this.Data.Orientation === "right" )
        {
            _string_left = this.FretboardRect.x;// + this._default_padding;
            _string_right = this.Width;// - this._default_padding;
        }
        else if (this.Data.Orientation === "left")
        {
            _string_left = 0;//this._default_padding;
            _string_right = this.StringNamesRect.x;// - this._default_padding;
        }

        for ( let i = 0; i < this.StringNames.length; i++ )
        {   //  console.debug( "this.StringNames[i]", this.StringNames[i].y );
            let _stroke_width = 0;
            if ( this.Data.Orientation === "right" )
            {
                _stroke_width = ( i + 1 );
            }
            else if (this.Data.Orientation === "left")
            {
                _stroke_width = ( this.StringNames.length - i );
            }

            let _new_string = {
                name: this.StringNames[i].text,
                x1: _string_left,
                y1: this.StringNames[i].y,
                x2: _string_right,
                y2: this.StringNames[i].y,
                stroke: "rgba(0,0,0,1)",
                strokeWidth: _stroke_width,
            };
            this.StringLinePositions.push( _new_string );
        }
        //  console.debug( "this.StringLinePositions", this.StringLinePositions.length, this.StringLinePositions );


        //  FRETS & FRET NAMES
        //  <line x1="100" y1="90" x2="100" y2="500" stroke="black" strokeWidth="10" />
        //  console.debug( "FRETS", this.FretboardRect, this.FretNamesRect );
        this.FretNames = [];
        this.Frets = [];

        this.FretsTextArea = {
            x: this.FretNamesRect.x,
            y: this.FretNamesRect.y + 30,
            rotate: 0,
            textLength: "50%",
            fontSize: 26,
            fillColor: "rgba(0,0,0,1)",
            dominantBaseline: "text-top",
            textAnchor: "start",
            text: "FRETS"
        };

        // fret names
        let _fret_data = [];

        let _top = this.FretboardRect.y;
        let _nut_strokeWidth = 1;
        let _bottom = this.Height;
        let _new_left = this.FretboardRect.x; // console.debug( "_new_left", _new_left );

        if ( this.Data.Orientation === "right" )
        {
            _new_left = this.FretboardRect.x;

            for ( let i = 0; i < this._fretboard_count + 1; i++ )
            {
                let _left = 0;

                if ( i === 0 )
                {
                    _left = _new_left;
                    _nut_strokeWidth = 6;
                }
                else
                {
                    _left = ( i * this._fret_height_space ) + _new_left;
                    _nut_strokeWidth = 1;
                }
                //  console.debug( i, _left );

                let _fn = {
                    text: i,
                    x: _left - 8,
                    y: _top - 10,
                    x1: _left,
                    y1: _top,
                    x2: _left,
                    y2:  _bottom,
                    strokeWidth: _nut_strokeWidth,
                    stroke: "rgba(0,0,0,1)"
                };
                _fret_data.push( _fn );
            }
        }
        else if ( this.Data.Orientation === "left" )
        {
            _new_left = this.FretboardRect.width;
            //  console.debug( "_new_left", _new_left );

            for ( let i = 0; i < this._fretboard_count + 1; i++ )
            {
                let _left = 0;

                if ( i === 0 )
                {
                    _left = _new_left;
                    _nut_strokeWidth = 6;
                }
                else
                {
                    _left =  _new_left - ( i * this._fret_height_space );
                    _nut_strokeWidth = 1;
                }
                //  console.debug( i, _left );

                let _fn = {
                    text: i,
                    x: _left - 8,
                    y: _top - 10,
                    x1: _left,
                    y1: _top,
                    x2: _left,
                    y2:  _bottom,
                    strokeWidth: _nut_strokeWidth,
                    stroke: "rgba(0,0,0,1)"
                };
                _fret_data.push( _fn );
            }
        }

        this.Frets = _fret_data;

        //console.debug( "this.FretNoteMatrix ", this.FretNoteMatrix );

        for ( let i = 0; i < this.StringLinePositions.length; i++ )
        {
            //  console.debug( "this.StringLinePositions", this.StringLinePositions[i].name, this.StringLinePositions[i].y1 );

            let _temp_fret_x1 = [];
            for ( let j = 0; j < this.Frets.length; j++ )
            {   //  console.debug( "this.Frets", this.Frets[j].text, this.Frets[j].x1 );

                let _new_y = 0;
                let _new_x = 0;

                if ( this.Data.Orientation === "right" )
                {
                    _new_y = this.StringLinePositions[i].y1 - 20;
                    _new_x = this.Frets[j].x1 - 49;
                }
                else if (this.Data.Orientation === "left")
                {
                    _new_y = this.StringLinePositions[i].y1 - 20;
                    _new_x = this.Frets[j].x1 + 10;
                }

                let _note_location = {
                    noteName: "XX",
                    y: _new_y,
                    x: _new_x
                }

                _temp_fret_x1.push( _note_location );
            }

            this.FretNoteMatrix[i] = _temp_fret_x1;
        }

        //  console.debug( "this.FretNoteMatrix ", this.FretNoteMatrix.length, this.FretNoteMatrix );    
        return;
    };